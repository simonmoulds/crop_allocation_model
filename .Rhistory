dim(area_mat)
n_season
n_input
get_total_areaC(area_mat, n_season, n_input)
init_area_mat
get_total_areaC(init_area_mat, n_season, n_input)
xyz=init_area_mat
all.equal(xyz, init_area_mat)
abc = get_total_areaC(init_area_mat, n_season, n_input)
all.equal(xyz, init_area_mat)
abc = get_total_areaC(init_area_mat, n_season, n_input)
all.equal(xyz, init_area_mat)
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
q()
n
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
cell_area
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
q()
n
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
length(which(is.nan(crop_area)))
length(which(is.nan(area_mat)))
source("code/allocate.R")
source("code/allocate.R")
for (i in 1:10) { source("code/allocate.R") }
q()
n
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
sum_interval(rep(1,20), 4)
sum_interval(1:20, 4)
0/0
10/0
0/0
any(is.na(yield_mat))
any(is.na(area_mat))
any(is.na(init_area_mat))
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
sourceCpp("code/allocate.cpp")
sourceCpp("code/allocate.cpp")
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
i
get_total_areaC(init_area_mat, n_season, n_input)
xx = init_area_mat[,1]
sum_interval(xx, n_season)
get_total_areaC(init_area_mat, n_season, n_input)
get_total_areaC(init_area_mat, n_season, n_input)
get_total_areaC(init_area_mat, n_season, n_input)
get_total_areaC(init_area_mat, n_season, n_input)
sourceCpp("code/allocate.cpp")
sourceCpp("code/allocate.cpp")
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:10) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
demand
dmd
dmd1
which(is.nan(dmd1))
which(is.nan(area_mat[,27]))
area_mat[128200:128210,27]
0 / -8.881784e-16
-8.881784e-16 / 0
init_area_mat[128200:128210,27]
n_cell
n_season
n_input
dim(init_area_mat)
444312/12
128204/12
128206/12
128208/12
myfun(3,4)
x
for (i in 1:20) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:20) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:20) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
init_area_mat[128200:128210,27]
which(is.nan(area_mat[,27]))
any(yield_mat < 0)
any(is.na(yield_mat))
any(is.finite(yield_mat))
any(!is.finite(yield_mat))
all(is.finite(yield_mat))
all(is.finite(init_area_mat))
crop
area_mat[323235:323245,27]
for (i in 1:20) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:20) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
sourceCpp("code/allocate.cpp")
sourceCpp("code/allocate.cpp")
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
i
crop
crop_ix
which(is.nan(area_mat[,33]))
area_mat[141541,33]
area_mat[141535:141545,33]
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
i
crop
crop_ix
decr
decr_ix
which(is.nan(area_mat[,28]))
area_mat[252445:252455,33]
area_mat[252445:252455,28]
init_area_mat[252445:252455,28]
init_area_mat[252445:252460,28]
area_mat[252445:252460,28]
any(area_mat[,28] < 0)
which((area_mat[,28] < 0))
ix=which((area_mat[,28] < 0))
area_mat[ix,28]
v = area_mat[ix,28]
area_mat[ix,28]
v=area_mat[ix,28]
v
myfun(v)
-6.938894e-18  / -2.775558e-17
q()
n
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
crop_ix
which(is.nan(area_mat[,27]))
area_mat[230000:230005,27]
decr_ix
decr_ix[crop_ix]
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
crop_ix
decr_ix
decr_ix[crop_ix]
any(area_mat[,28] < 0)
area_mat[,28]
xx=area_mat[,28]
summary(xx)
xx[is.na(xx)]
which(is.na(xx))
xx[83431]
xx[83425:83435]
1 - NaN
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
for (i in 1:50) { res=try(source("code/allocate.R")); if ("try-error" %in% class(res)) { stop() }}
q()
n
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
decr
crop
crop %in% decr_crops
which(colnames(area_mat) %in% "rice")
which(area_mat[,27] < 0)
which(is.na(area_mat[,27]))
area_mat[274240:274250,27]
NA/NA
NaN/NA
NA/0
0/NA
0<0
sourceCpp("code/allocate.cpp")
source("code/allocate.R")
source("code/allocate.R")
.Random.seed
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
for (i in 1:100) {source("code/allocate.R")}
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
source("code/allocate.R")
any(is.na(area_mat))
any(area_mat < 0)
length(which(area_mat < 0))
area_mat[area_mat < 0]
source("code/allocate.R")
source("code/allocate.R")
area_mat[area_mat < 0]
NA < 0
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
cell_area
cell_area / 1000 / 1000
sourceCpp("code/allocate.cpp")
sourceCpp("code/allocate.cpp")
source("code/allocate.R")
area_mat[area_mat < 0]
dim(area_mat)
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
source("code/allocate.R")
any(is.na(area_mat))
area_mat[area_mat < 0]
yield_mat[area_mat < 0]
init_yield_mat[area_mat < 0]
length(which(is.na(yield_mat)))
length(which(is.na(init_yield_mat)))
any(is.na(init_yield_mat))
init_yield_mat
init_yield_mat[area_mat < 0]
which(area_mat < 0)
init_yield_mat[14387535]
ix = which(area_mat < 0)
ix
init_yield_mat[ix]
init_yield_mat[area_mat < 0]
which(is.na(area_mat))
yield_mat[14359525]
head(area_mat)
myfun(1.1)
myfun(1.5)
myfun(2)
myfun(2.0)
myfun(2.1)
myfun(2.1)
myfun(2)
myfun(1)
myfun(0.9)
myfun(1.5)
myfun(1.50)
myfun(1.499999999999999999)
myfun(1.499999999)
myfun(1.2)
myfun(1.1)
myfun(1.1)
head(yield_mat)
head(area_mat)
area_mat[,1]
ls
myfun(10,4)
10 / 4
myfun(10,4)
round(10/4)
10/4
round(2.5)
round(2.5)
round(2.5)
round(1.5)
round(2.5)
round(3.5)
round(2.5)
round(1.5)
round(0.5)
round(0.50)
round(0.5)
myfun(10,4)
10 / 4
10 / 4 + 0.5
floor(10 / 4 + 0.5)
myfun(10,4)
myfun(10,4)
myfun(10,4)
myfun(10,4)
myfun(1,3)
myfun(10,4)
myfun(10,4)
myfun(10,4)
myfun(-10,4
)
-10/4
round(-10/4)
round(-10/3)
-10/3
3.5*4
round(-14/3)
round(-14/4)
max(area_mat)
max(init_area_mat)
fact
cell_area
fact * cell_area
cell_area
10 * 10
10 * 10 * 1000 * 1000 / 10000
1/ 10000
0.0001 / 1e04
0.0001 / 1e-04
source("code/allocate.R")
round(2.5)
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
myfun()
myfun()
myfun()
any(is.na(area_mat))
area_mat
area_mat[area_mat < 0]
myfun()
myfun()
myfun()
myfun()
myfun()
max(area_mat)
min(area_mat)
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
source("code/allocate.R")
area_mat[area_mat < 0]
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
min(1,1)
fact * cell_area
fact * cell_area 
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
max(-0.001,0.00001)
area_mat[area_mat < 0]
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
max(NaN, 0)
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
source("code/allocate.R")
area_mat[area_mat < 0]
for (i in 1:100) {source("code/allocate.R")}
area_mat[area_mat < 0]
sourceCpp("code/allocate.cpp")
plot(crop_area_2005)
q()
n
plot(crop_area_2005)
dev.off()
plot(crop_area_2005)
dev.off()
Sys.setenv("DISPLAY"=":0.0")
plot(crop_area_2005)
q()
n
plot(crop_area_2005)
dev.off()
Sys.setenv("DISPLAY"=":0.0")
plot(crop_area_2005)
plot(1:10)
dev.off()
q()
n
plot(crop_area_2005)
raster::aggregate(crop_area_2005, fact=5)
crop_area_2005
crop_area_2005
raster::aggregate(crop_area_2005, fact=5)
plot(raster::aggregate(crop_area_2005, fact=5))
plot(raster::aggregate(crop_area_2005, fact=1))
raster::aggregate(crop_area_2005, fact=5)
plot(raster::aggregate(crop_area_2005, fact=5))
crop_area_2005
india_rgn
plot(india_rgn)
plot(india_rgn)
plot(india_rgn)
?raster::aggregate
plot(india_rgn)
plot(crop_area_2005)
india_ext
india_ext
rice_phys
plot(rice_phys[[1]])
crop_area_2005
rice_phys
rice_phys[[1]]
plot(rice_phys[[1]])
rice_suit_w
plot(rice_suit_w[[1]])
plot(rice_suit[[1]])
suffix
rice_yield
sapply(rice_yield, isLonLat)
rice_phys
rice_phys
rice_yield
plot(rice_yield[[1]])
q()
n
source("code/prepare_input_data.R")
length(cell_ix)
getValues(area(india_rgn)) * 1000 * 1000 / 10000
max(cell_ix)
cell_area
source("code/prepare_input_data.R")
length(sorg_yield)
sorg_yield[[1]]
sorg_yield[[2]]
sorg_yield[[3]]
sorg_yield[[4]]
sorg_yield[[5]]
sorg_yield[[6]]
yield=sorg_yield
suit=sorg_suit
rm(yield)
rm(suit)
dim(rabi_area_df)
q()
n
